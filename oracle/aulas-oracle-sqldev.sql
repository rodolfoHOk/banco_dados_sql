-- AULA 194 - CUSTOMIZADO TABLESPACE

CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE '/home/oracle/Data/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE '/home/oracle/Data/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

-- AULA 195 - SEQUENCES

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

-- CRIANDO UMA TABELA NA TABLESPACE

CREATE TABLE FUNCIONARIOS(
    IDFUNCIONARIO INT PRIMARY KEY,
    NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');

SELECT * FROM FUNCIONARIOS;

-- AULA 196 - ALTERANDO TABLESPACE

-- CRIANDO UMA TABLESPACE DE MARKETING

CREATE TABLESPACE MARKETING
DATAFILE '/home/oracle/Data/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
    IDCAMPANHA INT PRIMARY KEY,
    NOME VARCHAR2(30)
)TABLESPACE MARKETING;

INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'VERAO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'INVERNO');

SELECT * FROM CAMPANHAS;

-- COLOCANDO A TABLESPACE OFFLINE

ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

SELECT * FROM FUNCIONARIOS; -- NÃO ACESSIVEL NO MOMENTO

SELECT * FROM CAMPANHAS; -- FUNCIONANDO NORMALMENTE

-- AGORA PODEMOS COPIAR E COLAR OS DBF DO RESURSOS HUMANOS
-- PODE SER PARA BACKUP OU PARA TRANFERIR PARA UM HD COM MAIS ESPAÇO, ETC...
-- NO CASO MOVEMOS DA PASTA DATA PARA PASTA PRODUCAO PARA SIMULAR UMA ACAO

-- APONTAR PARA O DICIONARIO DE DADOS AS MUDANÇA DE LUGAR

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE '/home/oracle/Data/RH_01.DBF'
TO '/home/oracle/Producao/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE '/home/oracle/Data/RH_02.DBF'
TO '/home/oracle/Producao/RH_02.DBF';

-- TORNANDO A TABLESPACE ONLINE

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM FUNCIONARIOS; -- FUNCIONANDO NORMALMENTE

SELECT * FROM CAMPANHAS; -- FUNCIONANDO NORMALMENTE

-- AULA 197 - PSEUDO COLUNAS

DROP TABLE ALUNO;

CREATE TABLE ALUNO(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
)TABLESPACE RECURSOS_HUMANOS;

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO;

CREATE TABLE ALUNO2(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO2;

-- DUAS PSEUDO COLUNAS ROWID E ROWNUM

-- ROWID - ID UNICO EM TODO O BANCO - USADO PARA TUNNING

SELECT ROWID,IDALUNO,NOME,EMAIL FROM ALUNO;

SELECT ROWID,IDALUNO,NOME,EMAIL FROM ALUNO2;

-- ROWNUM - USADO PARA PAGINACAO (EX: EM SITE WEB QUEBRANDO RESULTADOS EM PAGINAS)

SELECT ROWNUM,IDALUNO,NOME,EMAIL FROM ALUNO;

SELECT ROWNUM,IDALUNO,NOME,EMAIL FROM ALUNO2;

-- EXEMPLO PAGINACAO COM ROWNUM

SELECT NOME, EMAIL FROM ALUNO WHERE ROWNUM <= 2;

-- AULA 198 - TRIGGERS

-- PROCEDURE

CREATE OR REPLACE PROCEDURE BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE, P_PERCENT NUMBER)
AS
    BEGIN
        UPDATE ALUNO SET SALARIO = SALARIO + (SALARIO * (P_PERCENT / 100))
        WHERE IDALUNO = P_IDALUNO;
    END;
    /
    
SELECT * FROM ALUNO;

CALL BONUS(3,10);

SELECT * FROM ALUNO;

/* AS TRIGGERS DEVEM TER TOMANHO MAXIMO DE 32K
NÃO EXECUTAM COMANDOS DTL (COMMIT, ROLLBACK E SAVEPOINTS) */

-- TRIGGER DE VALIDACAO

CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
    IF :NEW.SALARIO < 2000 THEN
        RAISE_APPLICATION_ERROR(-20000, 'VALOR INVALIDO');
    END IF;
END;
/

SHOW ERRORS; -- MOSTRAR OS ERROS DO CODIGO QUE TENTOU EXECUTAR ANTES

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'JOSE','JOSE@GMAIL.COM',100.00);

-- AULA 199 - CONTINUANDO TRIGGERS

SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;

-- TRIGGER DE EVENTOS

-- TRIGGER DE AUDITORIA

CREATE TABLE AUDITORIA(
    DATA_LOGIN DATE,
    LOGIN VARCHAR2(30)
);

CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
    INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
    VALUES(SYSDATE,USER);
END LOGPROC;
/

SELECT SYSDATE, USER FROM DUAL;

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/

SELECT * FROM AUDITORIA;

-- AULA 200 - CONTINUANDO TRIGGER

-- TRIGGER FALHA DE LOGON

CREATE OR REPLACE TRIGGER FALHA_LOGON
AFTER SERVERERROR ON DATABASE
BEGIN
    IF (IS_SERVERERROR(1017)) THEN
        INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
        VALUES(SYSDATE,'ORA-1017');
    END IF;
END FALHA_LOGON;
/

SELECT * FROM AUDITORIA;

-- TABELA DE ERROS COMUMS
-- 1004 - default username feature not supported
-- 1005 - password nulo
-- 1045 - privilegio insuficiente

-- AULA 201 - CONTINUANDO TRIGGERS

CREATE TABLE USUARIO(
    IDUSUARIO INT,
    NOME VARCHAR2(30)
);

CREATE TABLE BKP_USUARIO(
    IDBKP INT,
    NOME VARCHAR2(30),
    DATA_BKP DATE
);

INSERT INTO USUARIO VALUES(1,'JOAO');
INSERT INTO USUARIO VALUES(2,'CLARA');
COMMIT;

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
        INSERT INTO BKP_USUARIO(IDBKP, NOME, DATA_BKP)
        VALUES(:OLD.IDUSUARIO, :OLD.NOME, SYSDATE);
END;
/

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

SELECT * FROM BKP_USUARIO;

SELECT * FROM USUARIO;

-- AULA 202 - OPERACOES COM VIEWS

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY,
    NOME VARCHAR2(30),
    SEXO CHAR(1)
);

INSERT INTO CLIENTE VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','M');
INSERT INTO CLIENTE VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','F');
INSERT INTO CLIENTE VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','F');
COMMIT;

SELECT * FROM CLIENTE;

CREATE OR REPLACE VIEW V_CLIENTE
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM CLIENTE;
    
SELECT * FROM V_CLIENTE;

INSERT INTO V_CLIENTE VALUES(SEQ_EXEMPLO.NEXTVAL,'JOSE','M');

SELECT * FROM V_CLIENTE;
SELECT * FROM CLIENTE;

-- VIEW SOMENTE LEITURA ( NÃO PERMITE INSERT, DELETE, UPDATE)

CREATE OR REPLACE VIEW V_CLIENTE_RO
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM CLIENTE
    WITH READ ONLY;

SELECT * FROM V_CLIENTE_RO;

INSERT INTO V_CLIENTE_RO VALUES(SEQ_EXEMPLO.NEXTVAL,'MARIA','F');

SELECT * FROM CLIENTE;
SELECT * FROM V_CLIENTE_RO;

-- VIEW DE JOIN

CREATE OR REPLACE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE; -- ERRO TABELA TELEFONE NAO EXISTE
    
-- FORCE

CREATE OR REPLACE FORCE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE;
    
SELECT * FROM RELATORIO;

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(15),
    ID_CLIENTE INT
);

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE; 
-- ORACLE PEGA A CHAVE PRIMARIA DA TABELA NÃO NECESSITANDO ... CLIENTE(IDCLIENTE);

INSERT INTO TELEFONE VALUES(SEQ_EXEMPLO.NEXTVAL, '123456789',41);
INSERT INTO TELEFONE VALUES(SEQ_EXEMPLO.NEXTVAL, '234567891',42);
INSERT INTO TELEFONE VALUES(SEQ_EXEMPLO.NEXTVAL, '345678912',43);
INSERT INTO TELEFONE VALUES(SEQ_EXEMPLO.NEXTVAL, '456789123',44);

SELECT * FROM RELATORIO;

COMMIT;

-- AULA 203 - DEFERRABLE CONSTRAINTS - TEORIA

-- AULA 204 - DEFERRABLE CONSTRAINTS CONT.

CREATE TABLE FUNCIONARIO(
    IDFUNCIONARIO INT CONSTRAINT PK_FUNCIONARIO PRIMARY KEY,
    NOME VARCHAR2(100)
);

DROP TABLE TELEFONE;

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(15),
    ID_FUNCIONARIO INT
);

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_FUNCIONARIO_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO;

INSERT INTO FUNCIONARIO VALUES(1,'MAURICIO');
INSERT INTO TELEFONE VALUES(10,'123456789',1);

/* A CONSTRAINT DE INTEGRIDADE REFERENCIAL (FK) CHECA A INTEGRIDADE
LOGO APOS O COMANDO DE DML(INSERT, DELETE, UPDATE) NÃO POSSIBILITANDO 
ASSIM A INSERÇÃO DE REGISTROS SEM REFERENCIA.
É COMPORTAMENTO PADRÃO DO BANCO */

INSERT INTO TELEFONE VALUES(20,'223456789',34); -- ERRO

DELETE FROM FUNCIONARIO WHERE IDFUNCIONARIO = 1; -- ERRO

SELECT * FROM TELEFONE; -- TEM TELEFONE COM FUNCIONARIO 1

-- VERIFICANDO O ESTADO DAS CONSTRAINTS

SELECT CONSTRAINT_NAME, DEFERRABLE, DEFERRED
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('FUNCIONARIO','TELEFONE');

-- AULA 205 - DEFERRABLE CONSTRAINTS CONT.

-- APAGANDO A CONSTRAINT

ALTER TABLE TELEFONE DROP CONSTRAINT FK_FUNCIONARIO_TELEFONE;

-- RECRIANDO A CONSTRAINT

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO
DEFERRABLE;

SELECT CONSTRAINT_NAME, DEFERRABLE AS "ATRASADA", DEFERRED AS "VERIFICACAO"
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('FUNCIONARIO','TELEFONE');

SELECT * FROM FUNCIONARIO;

INSERT INTO TELEFONE VALUES(2,'234567891',10); -- ERRO

-- MUDANDO PARA VERIFICAR NA DTL OA INVES DA DML

SET CONSTRAINT ALL DEFERRED;

SELECT CONSTRAINT_NAME, DEFERRABLE AS "ATRASADA", DEFERRED AS "VERIFICACAO"
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('FUNCIONARIO','TELEFONE');
-- MOSTRA OS DADOS DA CRIACAO DA CONSTRAINT ENTAO MESMO COM O COMANDO SET...
-- NÃO IRÁ MUDAR OS DADOS AQUI.

INSERT INTO TELEFONE VALUES(2,'234567891',10); -- OK PASSOU

SELECT * FROM TELEFONE; -- ESTÁ AQUI

COMMIT; -- FEZ ROOLBACK

SELECT * FROM TELEFONE; -- NÃO ESTÁ MAIS AQUI

-- FIM AULAS ORACLE DATABASE



